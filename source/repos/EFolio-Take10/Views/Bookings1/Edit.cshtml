@model EFolio_Take10.Models.Booking

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<link href="~/Content/Style.css" rel="stylesheet" />
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css">

<h2 class="heading">Add Rating and Review</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

<div class="form-horizontal center-text">
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.Id)


    <div class="form-group no-display">
        @Html.LabelFor(model => model.BookingDateTime, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.BookingDateTime, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.BookingDateTime, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group no-display">
        @Html.LabelFor(model => model.RoomID, "RoomID", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownList("RoomID", null, htmlAttributes: new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.RoomID, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group no-display">
        @Html.LabelFor(model => model.GuestID, "GuestID", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownList("GuestID", null, htmlAttributes: new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.GuestID, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group no-display">
        @Html.LabelFor(model => model.CheckInDate, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.CheckInDate, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.CheckInDate, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group no-display">
        @Html.LabelFor(model => model.CheckOutDate, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.CheckOutDate, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.CheckOutDate, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group no-display">
        @Html.LabelFor(model => model.NoOfAdults, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.NoOfAdults, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.NoOfAdults, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group no-display">
        @Html.LabelFor(model => model.NoOfChildren, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.NoOfChildren, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.NoOfChildren, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group no-display">
        @Html.LabelFor(model => model.TotalCharge, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.TotalCharge, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.TotalCharge, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.Rating, htmlAttributes: new { @class = "control-label col-md-2" })
        <p>(Enter 1 - 5 ) </p>
        <div class="col-md-10 cent">

            <input type="number" class="form-control cent" max="5" min="0" name="rating" id="txtboxToFilter" />
            @*@Html.EditorFor(model => model.Rating, new { htmlAttributes = new { @class = "form-control cent", @type = "number" } })*@
            @Html.ValidationMessageFor(model => model.Rating, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Comment, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10 cent">
            <textarea name="comment" class="form-control"></textarea>
            @*@Html.EditorFor(model => model.Comment, new { htmlAttributes = new { @class = "form-control" } })*@
            @Html.ValidationMessageFor(model => model.Comment, "", new { @class = "text-danger cent" })
        </div>
    </div>

    <div class="form-group cent">
        <div class="col-md-offset-col-md-10 cent">
            <button type="submit" class="btn custom-btn cent btn-spacing"> Save</button>

        </div>
    </div>
</div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>
<script>
    $(document).ready(function () {
            $("txtboxToFilter").attr({
               "max" : 5,        // substitute your own
               "min" : 1          // values (or variables) here
            });
           $("#txtboxToFilter").keydown(function (e) {
               // Allow: backspace, delete, tab, escape, enter and .
               if ($.inArray(e.keyCode, [46, 8, 9, 27, 13, 110, 190]) !== -1 ||
                   // Allow: Ctrl+A
                   (e.keyCode == 65 && e.ctrlKey === true) ||
                   // Allow: home, end, left, right, down, up
                   (e.keyCode >= 35 && e.keyCode <= 40)) {
                   // let it happen, don't do anything
                   return;
               }
               // Ensure that it is a number and stop the keypress
               if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {
                   e.preventDefault();
               }
           });
       });
</script>