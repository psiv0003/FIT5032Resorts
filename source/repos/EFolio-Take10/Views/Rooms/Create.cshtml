@model EFolio_Take10.Models.Room

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/AdminLayout.cshtml";
}

<h2>Create</h2>

@using (Html.BeginForm("Create", "Rooms", FormMethod.Post, new { enctype = "multipart/form-data"})) 
{
    @Html.AntiForgeryToken()
    
<div class="form-horizontal">
    <h4>Room</h4>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <div class="form-group">
        @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @*@Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })*@
            <input type="text" name="roomName" class="form-control" />
            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.AdultCapacity, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.AdultCapacity, new { htmlAttributes = new { @class = "form-control", @id = "adult" } })
            @Html.ValidationMessageFor(model => model.AdultCapacity, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.ChildCapacity, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.ChildCapacity, new { htmlAttributes = new { @class = "form-control", @id = "child" } })
            @Html.ValidationMessageFor(model => model.ChildCapacity, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <lable class="control-lable col-md-2" for="ImgName">Select File</lable>
        @*@Html.LabelFor(model => model.ImgURL, htmlAttributes: new { @class = "control-label col-md-2" })*@
        <div class="col-md-10">
            <input type="file" name="postedFile" class="btn btn-default" accept="image/png, img/gif,image/jpeg" />
            @*@Html.EditorFor(model => model.ImgURL, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ImgURL, "", new { @class = "text-danger" })*@
        </div>
    </div>

    <div class="form-group">
       Status
        <div class="col-md-10">
            Active
            @Html.RadioButtonFor(model => model.ImgName, "Active")
            Inactive
            @Html.RadioButtonFor(model => model.ImgName, "Inactive")
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Price, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.ResortID, "ResortID", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownList("ResortID", null, htmlAttributes: new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.ResortID, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Create" class="btn btn-default" />
        </div>
    </div>
</div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>
<script>
    $(document).ready(function () {
          
           $("#adult").keydown(function (e) {
               // Allow: backspace, delete, tab, escape, enter and .
               if ($.inArray(e.keyCode, [46, 8, 9, 27, 13, 110, 190]) !== -1 ||
                   // Allow: Ctrl+A
                   (e.keyCode == 65 && e.ctrlKey === true) ||
                   // Allow: home, end, left, right, down, up
                   (e.keyCode >= 35 && e.keyCode <= 40)) {
                   // let it happen, don't do anything
                   return;
               }
               // Ensure that it is a number and stop the keypress
               if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {
                   e.preventDefault();
               }
           });
       });
</script>